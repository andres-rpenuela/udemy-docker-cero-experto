#version: '3'
# docker compose up -d
# docker compose down
# docker compose down --volumes

# Esto ejecuta el contexto defindio (usa el de dev)
# 1º Generar la build hasta un stage especifico: docker compose build
# 2º Ejecutar el docker compose: docker compose up -d
# 3º Limpiar todo hasta los volumes: docker compose down --volumes

# Ejecutar un docker compose con otro nombre (crea una imagen con la configuacion defniida en build del fiechero compose-pro y la ejecuta)
# 1º docker compose -f docker-compose-pro.yml build 
# 2º docker compose -f docker-compose-pro.yml up  (o) docker compose -fdocker-compose-pro.yml up -d

services:
  db:
    image: postgres:14.3
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    container_name: ${DB_NAME}
    volumes:
      - postgres-db:/var/lib/postgresql/data
  
  # Contenedor para la aplicacion
  app:
    build:
      # Busca donde esta el dockerfile (por defecto, dondo esta en docker.compose.yml)
      context: .
      # hasta que stage del Dockerfile ejecutar (si no se pone, ejecuta todo), se puede usar ${STAGE} del .evn
      target: pro
      dockerfile: Dockerfile
    # Comando a lanzar cuadno se genere la imagen
    #command: yarn start:dev

    #Cuando se genera el build de proudccion no es necesario los bind volumen, dado que solo se coge el dist
    #Y este punto se condicion normalmente
#    volumes:
#      - .:/app/                 # Comparte tu proyecto al contenedor
#      - /app/node_modules       # Protege las dependencias del contenedor

    container_name: nest-app
    image: colera/testlo-shop-app-pro
    # Le del fichero .evn
    ports:
      - ${PORT}:${PORT}
    # Carga las variables de entorno definidas en el .env, al contendor
    environment:
      APP_VERSION: ${APP_VERSION}
      STAGE: ${STAGE}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USERNAME: ${DB_USERNAME}
      PORT: ${PORT}
      HOST_API: ${HOST_API}
      JWT_SECRET: ${JWT_SECRET}



volumes:
  postgres-db:
    external: false